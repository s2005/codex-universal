name: Build Python Image

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'LICENSES/**'
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'LICENSES/**'
      - '*.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to build'
        required: true
        default: '3.12'
        type: choice
        options:
        - '3.10'
        - '3.11'
        - '3.12'
        - '3.13'

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/codex-python
  IMAGE_TAG: ${{ inputs.python_version || '3.12' }}

jobs:
  build-and-push:
    name: Build Python ${{ inputs.python_version || '3.12' }} Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
    - uses: actions/checkout@v4
    - name: Log in to ghcr.io
      uses: docker/login-action@v3.4.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v6
      with:
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        build-args: |
          PYTHON_VERSION=${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
      with:
        push-to-registry: true
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.docker_build.outputs.digest }}
